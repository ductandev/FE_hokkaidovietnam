import { Injectable } from '@nestjs/common';
import { PrismaClient } from '@prisma/client';

import { Response } from 'express';
import { errorCode, failCode, successCode } from 'src/Config/response';
import { CreateProductTypeDto } from './dto/create-product-type.dto';

@Injectable()
export class ProductTypeService {
  constructor() { }

  model = new PrismaClient();


  // ============================================
  //            GET ALL TYPE PRODUCTS
  // ============================================ 
  async getAllProductType(res: Response) {
    try {
      let data = await this.model.loaiSanPham.findMany({
        where: {
          isDelete: false
        }
      });

      if (data.length === 0) {
        return successCode(res, data, 200, "Ch∆∞a c√≥ lo·∫°i s·∫£n ph·∫©m n√†o ƒë∆∞·ª£c th√™m v√†o d·ªØ li·ªáu")
      }

      successCode(res, data, 200, "Th√†nh c√¥ng !")
    }
    catch (exception) {
      console.log("üöÄ ~ file: product-type.service.ts:33 ~ ProductTypeService ~ getAllProductType ~ exception:", exception);
      errorCode(res, "L·ªói BE")
    }
  }

  // ============================================
  //       GET NAME PRODUCT TYPE BY ID
  // ============================================ 
  async getProductTypeById(productTypeID: number, res: Response) {
    try {
      let data = await this.model.loaiSanPham.findFirst({
        where: {
          loai_san_pham_id: +productTypeID,
          isDelete: false
        }
      });

      if (data === null) {
        return failCode(res, '', 404, "Lo·∫°i s·∫£n ph·∫©m ID kh√¥ng t·ªìn t·∫°i")
      }

      successCode(res, data, 200, "Th√†nh c√¥ng !")
    }
    catch (exception) {
      console.log("üöÄ ~ file: product-type.service.ts:57 ~ ProductTypeService ~ getProductTypeById ~ exception:", exception);
      errorCode(res, "L·ªói BE")
    }
  }

  // ============================================
  //       GET PRODUCT TYPE BY NAME
  // ============================================ 
  async getNameProductType(nameProductType: string, res: Response) {
    try {
      let data = await this.model.loaiSanPham.findMany({
        where: {
          ten_loai_san_pham: {
            contains: nameProductType   // LIKE '%nameProductType%'
          },
          isDelete: false
        }
      });

      if (data.length === 0) {
        return successCode(res, data, 200, "Kh√¥ng c√≥ d·ªØ li·ªáu k·∫øt qu·∫£ t√¨m ki·∫øm !")
      }

      successCode(res, data, 200, "Th√†nh c√¥ng !")
    }
    catch (exception) {
      console.log("üöÄ ~ file: product-type.service.ts:83 ~ ProductTypeService ~ getNameProductType ~ exception:", exception);
      errorCode(res, "L·ªói BE !")
    }
  }

  // ============================================
  //      GET PANIGATION LIST PRODUCT TYPE
  // ============================================
  async getPanigationProductType(pageIndex: number, pageSize: number, res: Response) {
    try {
      let index = (pageIndex - 1) * pageSize;
      if (index < 0) {
        return failCode(res, '', 400, "PageIndex ph·∫£i l·ªõn h∆°n 0 !")
      };

      let data = await this.model.loaiSanPham.findMany({
        skip: +index,     // S·ª≠ d·ª•ng skip thay v√¨ offset
        take: +pageSize,  // S·ª≠ d·ª•ng take thay v√¨ limit
        where: {
          isDelete: false,
        }
      });

      if (data.length === 0) {
        return successCode(res, data, 200, "Kh√¥ng c√≥ d·ªØ li·ªáu lo·∫°i s·∫£n ph·∫©m n√†o ƒë∆∞·ª£c t√¨m th·∫•y !")
      }

      successCode(res, data, 200, "Th√†nh c√¥ng !")
    }
    catch (exception) {
      console.log("üöÄ ~ file: product-type.service.ts:113 ~ ProductTypeService ~ getPanigationProductType ~ exception:", exception);
      errorCode(res, "L·ªói BE")
    }
  }

  // ============================================
  //            POST PRODUCT TYPE 
  // ============================================
  async postProductType(body: CreateProductTypeDto, res: Response) {
    try {
      let { ten_loai_san_pham } = body;

      if (ten_loai_san_pham === undefined) {
        return failCode(res, "", 400, "D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng !")
      }

      let data = await this.model.loaiSanPham.findFirst({
        where: {
          ten_loai_san_pham,
          isDelete: false
        }
      })

      if (data !== null) {
        return failCode(res, data, 409, "Lo·∫°i s·∫£n ph·∫©m n√†y ƒë√£ t·ªìn t·∫°i !")
      }

      await this.model.loaiSanPham.create({
        data: body
      })

      successCode(res, body, 201, "Th√™m lo·∫°i s·∫£n ph·∫©m th√†nh c√¥ng !")
    }
    catch (exception) {
      console.log("üöÄ ~ file: product-type.service.ts:147 ~ ProductTypeService ~ postProductType ~ exception:", exception);
      errorCode(res, "L·ªói BE")
    }
  }

  // ============================================
  //             PUT PRODUCT TYPE 
  // ============================================
  async putProductType(productTypeID: number, body: CreateProductTypeDto, res: Response) {
    try {
      let { ten_loai_san_pham } = body;

      if (ten_loai_san_pham === undefined) {
        return failCode(res, "", 400, "D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng !")
      }

      let data = await this.model.loaiSanPham.findFirst({
        where: {
          loai_san_pham_id: +productTypeID,
          isDelete: false
        }
      });

      if (data === null) {
        return failCode(res, data, 400, "Lo·∫°i s·∫£n ph·∫©m ID kh√¥ng t·ªìn t·∫°i !")
      }

      let newData = await this.model.loaiSanPham.update({
        where: {
          loai_san_pham_id: +productTypeID,
        },
        data: body
      })

      successCode(res, newData, 200, "C·∫≠p nh·∫≠t t√™n lo·∫°i s·∫£n ph·∫©m th√†nh c√¥ng !")
    }
    catch (exception) {
      console.log("üöÄ ~ file: product-type.service.ts:184 ~ ProductTypeService ~ putProductType ~ exception:", exception);
      errorCode(res, "L·ªói BE !")
    }
  }

  // ============================================
  //            DELETE PRODUCT TYPE 
  // ============================================
  async deleteProductType(productTypeID: number, res: Response) {
    try {
      let data = await this.model.loaiSanPham.findFirst({
        where: {
          loai_san_pham_id: +productTypeID,
          isDelete: false
        }
      });


      if (data === null) {
        return failCode(res, data, 400, "Lo·∫°i s·∫£n ph·∫©m ID kh√¥ng t·ªìn t·∫°i !")
      }

      await this.model.loaiSanPham.update({
        where: {
          loai_san_pham_id: +productTypeID
        },
        data: {
          isDelete: true
        }
      })

      successCode(res, data, 200, "X√≥a lo·∫°i s·∫£n ph·∫©m th√†nh c√¥ng !")
    }
    catch (exception) {
      console.log("üöÄ ~ file: product-type.service.ts:218 ~ ProductTypeService ~ deleteProductType ~ exception:", exception);
      errorCode(res, "L·ªói BE")
    }
  }


}
